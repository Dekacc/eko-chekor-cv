from tensorflow.keras.preprocessing.image import load_img
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.applications.xception import preprocess_input
from tensorflow.keras.applications.xception import Xception
from tensorflow.keras.models import Model, load_model


def evaluate_waste(image):
    # The image should be loaded with resolution (299, 299) using the load_img function from tensorflow.keras.preprocessing.image
    # Example: image = load_img(image_path, target_size=(299, 299))

    # Preprocess the image
    image = img_to_array(image)  # Convert the image pixels to a numpy array
    image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))  # reshape data for the model
    image = preprocess_input(image)  # prepare the image for the Xception model

    # Load Xception
    model = Xception()                                                      # Load the model
    model = Model(inputs=model.inputs, outputs=model.layers[-2].output)     # Remove the output layer
    image_features = model.predict(image)                                   # Get image features for the image

    # Load the waste model
    model = load_model('Xception_100-100.h5')

    # Return a prediction
    return model.predict(image_features)


def calculate_score(network_output):
    """
    Returns an integer score from 0 to 100 depending on the output from the network
    network_output should be a list of 4 float numbers (as generated by the neural network)
    """
    return max(100, int(network_output[1] * 33.33 + network_output[2] * 66.66 + network_output[3] * 100))


if __name__ == "__main__":
    # Example usage
    image = load_img('images/img_0_0.jpg', target_size=(299, 299))
    print(evaluate_waste(image))